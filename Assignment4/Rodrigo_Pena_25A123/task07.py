# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EBgQbHlvlAd9-U4soAr4flCYRZy8lwZw

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
result = [] #list of tuples
for s,p,o in g.triples((None,RDF.type,RDFS.Class)):
  superclass = g.value(subject = s, predicate = RDFS.subClassOf)
  result.append((s,superclass))

# Visualize the results
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query = """
SELECT ?c ?sc
WHERE {
  ?c rdf:type rdfs:Class
  OPTIONAL { ?c rdfs:subClassOf ?sc }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")
individuals = set() # Usamos un set para evitar duplicados

# 1. Creamos un conjunto con todas las clases de la jerarquía de Person
person_classes = { ns.Person }
# Usamos una lista para procesar las clases encontradas
classes_to_process = [ns.Person]

while classes_to_process:
    current_class = classes_to_process.pop()
    # Buscamos las subclases directas de la clase actual
    for subclass in g.subjects(RDFS.subClassOf, current_class):
        if subclass not in person_classes:
            person_classes.add(subclass)
            classes_to_process.append(subclass)

# 2. Ahora, para cada clase en la jerarquía, encontramos sus individuos
for p_class in person_classes:
    for individual in g.subjects(RDF.type, p_class):
        individuals.add(individual)

# 3. El resultado final debe ser una lista
individuals = list(individuals)

for i in individuals:
    print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
SELECT ?ind
WHERE {
  ?ind a ?type .
  ?type rdfs:subClassOf* ns:Person .
}
"""
for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?name ?type
WHERE {
  ?person ns:knows ns:Rocky.
  ?person rdfs:label ?name.
  ?person a ?type.
}
"""
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>

SELECT ?name
WHERE {
{
  ?person ns:hasColleague ?colleague .
  ?colleague ns:ownsPet ?pet .
  ?person rdfs:label ?name .
}
  UNION
  {
    ?person ns:hasColleague ?colleague .
    ?colleague ns:hasColleague ?colleague2 .
    ?colleague2 ns:ownsPet ?pet .
    ?person rdfs:label ?name .
  }
}
"""
for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")