# -*- coding: utf-8 -*-
"""Task07_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zP7djRTBeG5tsTNq-mV-TGtIeDmqV7W

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
result = [] #list of tuples
# Iterate over all subjects that are defined as an RDFS.Class
for c in g.subjects(RDF.type, RDFS.Class):
  # Find the superclass, if one exists (g.value returns None if not found)
  sc = g.value(subject=c, predicate=RDFS.subClassOf, object=None)
  result.append((c, sc))

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  """
SELECT ?c ?sc
WHERE {
  # Find all subjects ?c that are of type RDFS.Class
  ?c rdf:type rdfs:Class .
  OPTIONAL { ?c rdfs:subClassOf ?sc . }
}
"""
for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

# 1. Find all subclasses of ns.Person transitively (0 or more steps)
# g.transitive_subjects finds all subjects (subclasses) for a given predicate and object
individuals = []
person_subclasses = set(g.transitive_subjects(RDFS.subClassOf, ns.Person))

# 2. Add the ns.Person class itself to the set
all_person_classes = person_subclasses.union({ns.Person})

# 3. Find all individuals belonging to any of these classes
for person_class in all_person_classes:
  for individual in g.subjects(RDF.type, person_class):
    individuals.append(individual)

# 4. Remove potential duplicates
individuals = list(set(individuals))
# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?ind
WHERE {
  # ?ind is an individual of type ?c
  ?ind rdf:type ?c .
  # ?c is a subclass of ns:Person (0 or more steps, includes Person itself)
  ?c rdfs:subClassOf* ns:Person .
}
"""

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""


query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
SELECT DISTINCT ?name ?type
WHERE {
  ?person ns:knows ns:Rocky.
  ?person rdfs:label ?name.
  ?person a ?type.
}
"""
# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
PREFIX people: <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?name
WHERE {
    {
      ?person people:hasColleague / people:ownsPet ?perro.
      ?perro rdf:type people:Animal .
    }
    UNION
    {
      ?person people:hasColleague / people:hasColleague / people:ownsPet ?perro.
      ?perro rdf:type people:Animal .
    }
    ?person rdfs:label ?name .
  }
"""

for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")