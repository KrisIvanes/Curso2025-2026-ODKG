# -*- coding: utf-8 -*-
"""Task06_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GKS6qAm9T4y76LWtB8ZP-ToTFBSDENE_

**Task 06: Modifying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

"""Import RDFLib main methods"""

from rdflib import Graph, Namespace, Literal, XSD
from rdflib.namespace import RDF, RDFS
from validation import Report
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
r = Report()

"""Create a new class named Researcher"""

ns = Namespace("http://mydomain.org#")
g.add((ns.Researcher, RDF.type, RDFS.Class))
for s, p, o in g:
  print(s,p,o)

"""**Task 6.0: Create new prefixes for "ontology" and "person" as shown in slide 14 of the Slidedeck 01a.RDF(s)-SPARQL shown in class.**"""

# TO DO
# (Namespaces needed for validation in subsequent tasks)
ont = Namespace("http://oeg.fi.upm.es/def/people#")
inst = Namespace("http://oeg.fi.upm.es/resource/person/")
g.namespace_manager.bind('ont', ont, override=False)
g.namespace_manager.bind('inst', inst, override=False)

"""**TASK 6.1: Reproduce the taxonomy of classes shown in slide 34 in class (all the classes under "Vocabulario", Slidedeck: 01a.RDF(s)-SPARQL). Add labels for each of them as they are in the diagram (exactly) with no language tags. Remember adding the correct datatype (xsd:String) when appropriate**

"""

# TO DO
# Define class URIs using the 'ont' namespace
personURI = ont.Person
professorURI = ont.Professor
associateProfessorURI = ont.AssociateProfessor
interimURI = ont.InterimAssociateProfessor
fProfessorURI = ont.FullProfessor

# Add classes
g.add((personURI, RDF.type, RDFS.Class))
g.add((professorURI, RDF.type, RDFS.Class))
g.add((associateProfessorURI, RDF.type, RDFS.Class))
g.add((interimURI, RDF.type, RDFS.Class))
g.add((fProfessorURI, RDF.type, RDFS.Class))

# Add labels (exactly as in validation)
g.add((personURI, RDFS.label, Literal("Person", datatype=XSD.string)))
g.add((professorURI, RDFS.label, Literal("Professor", datatype=XSD.string)))
g.add((associateProfessorURI, RDFS.label, Literal("AssociateProfessor", datatype=XSD.string)))
g.add((interimURI, RDFS.label, Literal("InterimAssociateProfessor", datatype=XSD.string)))
g.add((fProfessorURI, RDFS.label, Literal("FullProfessor", datatype=XSD.string)))

# Add hierarchy
g.add((professorURI, RDFS.subClassOf, personURI))
g.add((associateProfessorURI, RDFS.subClassOf, professorURI))
g.add((interimURI, RDFS.subClassOf, associateProfessorURI))
g.add((fProfessorURI, RDFS.subClassOf, professorURI))

# Visualize the results
for s, p, o in g:
  print(s,p,o)

# Validation. Do not remove
r.validate_task_06_01(g)

"""**TASK 6.2: Add the 3 properties shown in slide 36. Add labels for each of them (exactly as they are in the slide, with no language tags), and their corresponding domains and ranges using RDFS. Remember adding the correct datatype (xsd:String) when appropriate. If a property has no range, make it a literal (string)**"""

# TO DO
# Define property URIs using 'ont' namespace
hasColleague = ont.hasColleague
hasName = ont.hasName
hasHomePage = ont.hasHomePage

# Add properties (as RDF.Property)
g.add((hasColleague, RDF.type, RDF.Property))
g.add((hasName, RDF.type, RDF.Property))
g.add((hasHomePage, RDF.type, RDF.Property))

# Add labels
g.add((hasColleague, RDFS.label, Literal("hasColleague", datatype=XSD.string)))
g.add((hasName, RDFS.label, Literal("hasName", datatype=XSD.string)))
g.add((hasHomePage, RDFS.label, Literal("hasHomePage", datatype=XSD.string)))

# Add domains and ranges
# (Class URIs personURI and fProfessorURI were defined in 6.1)

# hasColleague: domain Person, range Person
g.add((hasColleague, RDFS.domain, personURI))
g.add((hasColleague, RDFS.range, personURI))

# hasName: domain Person, range rdfs:Literal
g.add((hasName, RDFS.domain, personURI))
g.add((hasName, RDFS.range, RDFS.Literal))

# hasHomePage: domain FullProfessor, range rdfs:Literal
g.add((hasHomePage, RDFS.domain, fProfessorURI))
g.add((hasHomePage, RDFS.range, RDFS.Literal))

# Visualize the results
for s, p, o in g:
  print(s,p,o)

# Validation. Do not remove
r.validate_task_06_02(g)

"""**TASK 6.3: Create the individuals shown in slide 36 under "Datos". Link them with the same relationships shown in the diagram."**"""

# TO DO
# Define individual URIs using 'inst' namespace
oscar = inst.Oscar
asun = inst.Asun
raul = inst.Raul

# Add individuals and their types (inferred from validation)
# Asun hasHomePage (domain FullProfessor)
# Oscar hasName (domain Person) -> let's make him InterimAssociateProfessor
# Raul is a colleague (range Person) -> let's make him AssociateProfessor
g.add((oscar, RDF.type, interimURI)) # interimURI defined in 6.1
g.add((asun, RDF.type, fProfessorURI))  # fProfessorURI defined in 6.1
g.add((raul, RDF.type, associateProfessorURI)) # associateProfessorURI defined in 6.1

# Add labels (for validation retrieval)
g.add((oscar, RDFS.label, Literal("Oscar", datatype=XSD.string)))
g.add((asun, RDFS.label, Literal("Asun", datatype=XSD.string)))
g.add((raul, RDFS.label, Literal("Raul", datatype=XSD.string)))

# Add relationships (inferred from validation hints)
# Oscar: hasName, hasColleague
g.add((oscar, hasName, Literal("Oscar", datatype=XSD.string)))
g.add((oscar, hasColleague, raul))

# Asun: hasHomePage, hasColleague
g.add((asun, hasHomePage, Literal("http://www.asun.org", datatype=XSD.string)))
g.add((asun, hasColleague, oscar))

# Visualize the results
for s, p, o in g:
  print(s,p,o)

r.validate_task_06_03(g)

"""**TASK 6.4: Add to the individual person:Oscar the email address, given and family names. Use the properties already included in example 4 to describe Jane and John (https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials/rdf/example4.rdf). Do not import the namespaces, add them manually**

"""

# TO DO
# Define namespaces manually as requested
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
FOAF = Namespace("http://xmlns.com/foaf/0.1/")

# Bind them for cleaner output (optional)
g.namespace_manager.bind('vcard', VCARD, override=False)
g.namespace_manager.bind('foaf', FOAF, override=False)

# oscar URI (inst.Oscar) was defined in 6.3

# Add properties to Oscar
g.add((oscar, VCARD.Given, Literal("Oscar", datatype=XSD.string)))
g.add((oscar, VCARD.Family, Literal("Corcho", datatype=XSD.string))) # Assumed value
g.add((oscar, FOAF.email, Literal("oscar@fi.upm.es", datatype=XSD.string))) # Assumed value

# Visualize the results
for s, p, o in g:
  print(s,p,o)

# Validation. Do not remove
r.validate_task_06_04(g)
r.save_report("_Task_06")