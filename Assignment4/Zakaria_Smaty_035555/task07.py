# -*- coding: utf-8 -*-
#ZAKARIA SMATY
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qaclq1RFSK2E20pPTjlcoa9TEJcqD2EW

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
result = []

# en todos los triples buscamos aquellos con el predicado rdf:type y objeto rdfs:Class
# 1. Buscamos todas las tripletas (s, p, o) donde el predicado sea rdf:type y el objeto sea rdfs:Class
for s, p, o in g.triples((None, RDF.type, RDFS.Class)):

    # para cada clase "s" buscamos su superclase
    superclass = g.value(subject=s, predicate=RDFS.subClassOf, object=None)

    # a√±adimos la clase y su superclase (si la hubiera) a la lista
    result.append((s, superclass))


# Visualize the results
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

# buscamos todos las clases que sean rdfs:Class (?c)
# buscamos su superclase como optional para que en caso de que no tenga nos salga None (?sc)
query = """
    SELECT ?c ?sc
    WHERE {
        ?c rdf:type rdfs:Class .
        OPTIONAL {
            ?c rdfs:subClassOf ?sc .
        }
    }
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

individuals = []
individuals_set = set()

# sacamos la URI de person
person_class = ns.Person

# Buscamos todas las clases person y sus subclases
all_person_types = g.transitive_subjects(predicate=RDFS.subClassOf, object=person_class)

# buscamos en estas clases aquellas personas que sean del tipo rdf:type
for class_type in all_person_types:
    for individual in g.subjects(predicate=RDF.type, object=class_type):
        individuals_set.add(individual)


individuals = list(individuals_set)

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  """
    PREFIX ns: <http://oeg.fi.upm.es/def/people#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

    SELECT DISTINCT ?ind
    WHERE {
        ?ind rdf:type ?type .
        ?type rdfs:subClassOf* ns:Person .
    }
"""

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

# usamos la relacion knows para ver quienes conocen a un person llamado Rocky
q = """
    PREFIX ns: <http://oeg.fi.upm.es/def/people#>

    SELECT DISTINCT ?name ?type
    WHERE {
        ?person ns:knows ns:Rocky.
        ?person rdfs:label ?name.
        ?person rdf:type ?type.
    }

    GROUP BY ?name
"""

# Visualize the results
for r in g.query(q):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, q)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
    PREFIX people: <http://oeg.fi.upm.es/def/people#>
    SELECT DISTINCT ?name
    WHERE {
        {
        # estos son quienes tienen un amigo con perro
            ?person people:hasColleague ?amigo .
            ?amigo people:ownsPet ?perro.
        }
        UNION
        {
        # estos son los que tienen a un amigo de un amigo (amigo2) con perro
            ?person people:hasColleague ?amigo .
            ?amigo people:hasColleague ?amigo2 .
            ?amigo2 people:ownsPet ?perro.
        }
        ?person rdfs:label ?name
  }
"""

for r in g.query(query):
  print(r.name)

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")
