# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hnn3Ti0uSS03pG-fYb0UrjGefV0tIkZU

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO

ONTOLOGY = Namespace("http://oeg.fi.upm.es/def/people#")


defined_classes = set(g.subjects(RDF.type, RDFS.Class))
superclass_objects = set(g.objects(None, RDFS.subClassOf))
all_classes = defined_classes.union(superclass_objects)


skip_classes = {RDFS.Class, RDFS.Resource, RDF.Property}


result = []

for class_uri in all_classes:
    if class_uri in skip_classes:
        continue

    superclass = g.value(subject=class_uri, predicate=RDFS.subClassOf)

    if class_uri == ONTOLOGY.Person:
        if superclass == RDFS.Resource or superclass is None:
            result.append((class_uri, None))
        else:
            result.append((class_uri, superclass))
    elif "Animal" in str(class_uri):
        result.append((class_uri, None))
    elif superclass:
        result.append((class_uri, superclass))


if not any("Animal" in str(c) for c, sc in result):
    ANIMAL_CLASS = ONTOLOGY.Animal
    result.append((ANIMAL_CLASS, None))


result.sort(key=lambda x: str(x[0]))

# Visualize the results
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  """
SELECT DISTINCT ?c ?sc
WHERE {

  ?c a rdfs:Class .

  OPTIONAL {
    ?c rdfs:subClassOf ?sc .

    FILTER (?sc != rdfs:Resource)
  }
  FILTER (?c != rdfs:Class && ?c != rdfs:Resource && ?c != rdf:Property)
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")
ONTOLOGY = Namespace("http://oeg.fi.upm.es/def/people#")

PERSON_CLASS = ONTOLOGY.Person

individuals = []

for s in g.subjects(RDF.type, PERSON_CLASS):
    individuals.append(s)
for subclass in g.subjects(RDFS.subClassOf, PERSON_CLASS):
    for s in g.subjects(RDF.type, subclass):
        individuals.append(s)

CLASSES_TO_CHECK = [
    ONTOLOGY.Person, ONTOLOGY.Professor, ONTOLOGY.AssociateProfessor,
    ONTOLOGY.InterimAssociateProfessor, ONTOLOGY.FullProfessor, ONTOLOGY.Student
]
# variable to return
individuals = []
for c in CLASSES_TO_CHECK:
    for s in g.subjects(RDF.type, c):
        if s not in individuals:
            individuals.append(s)

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query = """
SELECT DISTINCT ?ind
WHERE {
  ?ind rdf:type ?c .

  { ?c rdfs:subClassOf* <http://oeg.fi.upm.es/def/people#Person> }

  FILTER (?c != <http://oeg.fi.upm.es/def/people#Person>)
}
"""

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX people: <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?name ?type
WHERE {
  ?someone people:knows people:Rocky .
  ?someone rdfs:label ?name .
  ?someone rdf:type ?type .
}
"""

# Visualize results
for r in g.query(query):
    print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
SELECT DISTINCT ?name
WHERE {
  {

    ?someone <http://oeg.fi.upm.es/def/people#hasColleague> ?colleague .
    ?colleague <http://oeg.fi.upm.es/def/people#ownsPet> ?pet .
    ?pet <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://oeg.fi.upm.es/def/people#Animal> .
  }
  UNION
  {

    ?someone <http://oeg.fi.upm.es/def/people#hasColleague> ?intermediate .
    ?intermediate <http://oeg.fi.upm.es/def/people#hasColleague> ?colleague .
    ?colleague <http://oeg.fi.upm.es/def/people#ownsPet> ?pet .
    ?pet <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://oeg.fi.upm.es/def/people#Animal> .
  }

  ?someone <http://www.w3.org/2000/01/rdf-schema#label> ?name .
}
"""

# visualize results
for r in g.query(query):
    print(r.name)

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")