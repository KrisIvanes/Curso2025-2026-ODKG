# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qQemHcle3CSJSjSL8dUcJ9TFdTQnrkjO

**Task 09: Data linking**
"""

"""!pip install rdflib"""
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials/"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage+"rdf/data03.rdf", format="xml")
g2.parse(github_storage+"rdf/data04.rdf", format="xml")

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos."""

for s,p,o in g1:
  print(s,p,o)

for s,p,o in g2:
  print(s,p,o)

from rdflib.namespace import RDF, OWL

VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

# Función para obtener apodo y apellido de manera flexible
def get_person_info(g, person):
    fn = g.value(person, VCARD.Given)
    family = g.value(person, VCARD.Family)
    return str(fn).strip() if fn else None, str(family).strip() if family else None

# Iterar todos los individuos de g1
for ind1 in g1.subjects(RDF.type, URIRef("http://data.three.org#Person")):
    fn1, family1 = get_person_info(g1, ind1)
    if not fn1 or not family1:
        continue

    # Comparar con individuos de g2
    for ind2 in g2.subjects(RDF.type, URIRef("http://data.four.org#Person")):
        fn2, family2 = get_person_info(g2, ind2)
        if not fn2 or not family2:
            continue

        # Comparación insensible a mayúsculas
        if fn1.lower() == fn2.lower() and family1.lower() == family2.lower():
            g3.add((ind1, OWL.sameAs, ind2))
            print(f"Enlazado: {ind1} owl:sameAs {ind2}")

# Guardar los enlaces en un nuevo RDF
g3.serialize("linked_individuals.rdf", format="xml")

for s,p,o in g3:
  print(s,p,o)

