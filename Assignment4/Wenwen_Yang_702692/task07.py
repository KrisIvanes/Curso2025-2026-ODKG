# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gBUKKUrX4iq1Rl56sM65lep-iaCiLqU1

**Task 07: Querying RDF(s)**
"""

"""!pip install rdflib"""
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
# Visualize the results
result = [] #list of tuples

# Iterate over all classes in the graph
for cls in g.subjects(RDF.type, RDFS.Class):
    # Try to get the superclass (rdfs:subClassOf)
    superclass = g.value(subject=cls, predicate=RDFS.subClassOf)
    if superclass is None:
        result.append((cls, None))
    else:
        result.append((cls, superclass))

for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

# SPARQL query
query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?c ?sc
WHERE {
    ?c a rdfs:Class .
    OPTIONAL { ?c rdfs:subClassOf ?sc }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return: List to store individuals
# Recursive function to get all subclasses of a class
def get_all_subclasses(cls, g):
    subclasses = set()
    for sc in g.subjects(RDFS.subClassOf, cls):
        subclasses.add(sc)
        subclasses.update(get_all_subclasses(sc, g))
    return subclasses

# Step 1: all classes under Person
classes_to_check = {ns.Person}
classes_to_check.update(get_all_subclasses(ns.Person, g))

# Step 2: collect individuals of these classes
individuals = set()
for cls in classes_to_check:
    for ind in g.subjects(RDF.type, cls):
        individuals.add(ind)

# Convert to list for validation
individuals = list(individuals)

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

# SPARQL query to get all individuals of Person (including subclasses)
query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX person: <http://oeg.fi.upm.es/def/people#>

SELECT ?ind
WHERE {
    ?ind rdf:type/rdfs:subClassOf* person:Person .
}
"""

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

# SPARQL query to get individuals who know "Rocky"
query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX person: <http://oeg.fi.upm.es/def/people#>

SELECT ?name ?type
WHERE {
    ?ind person:knows person:Rocky .
    ?ind rdfs:label ?name .
    ?ind rdf:type ?type .
}
"""

# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

for subj, pred, obj in g:
  print(subj,pred,obj)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX person: <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?name
WHERE {
    {
        # Direct colleague who owns a pet
        ?ind person:hasColleague ?col .
        ?col person:ownsPet ?pet .
    }
    UNION
    {
        # Colleague of a colleague who owns a pet
        ?ind person:hasColleague ?col1 .
        ?col1 person:hasColleague ?col2 .
        ?col2 person:ownsPet ?pet2 .
    }
    ?ind rdfs:label ?name .
}
"""

for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")

