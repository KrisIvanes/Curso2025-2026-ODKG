# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CKep5G6VGphO_OCKBi4rvoMPiEiW-xad

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

result = [] #list of tuples
for s, p, o in g.triples((None, RDF.type, RDFS.Class)):
  superclass = g.value(subject=s, predicate=RDFS.subClassOf, object=None)
  result.append((s, superclass))

for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  """
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  SELECT ?c ?sc
  WHERE {
    ?c rdf:type rdfs:Class .
    OPTIONAL { ?c rdfs:subClassOf ?sc .}
  }
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return
individuals = []

# A list to act as a queue for classes to check, starting with Person
classes_to_check = [ns.Person]
# A list to keep track of classes we've already processed
processed_classes = []

while classes_to_check:
    current_class = classes_to_check.pop(0)
    if current_class in processed_classes:
        continue
    processed_classes.append(current_class)

    # Add individuals of the current class
    for ind in g.subjects(RDF.type, current_class):
        if ind not in individuals:
            individuals.append(ind)

    # Find direct subclasses and add them to the queue for processing
    for subclass in g.subjects(RDFS.subClassOf, current_class):
        classes_to_check.append(subclass)

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  """
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX person: <http://oeg.fi.upm.es/def/people#>

  SELECT ?ind
  WHERE {
    ?ind rdf:type ?type .
    ?type rdfs:subClassOf* person:Person .
  }
"""


for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query =  """
 PREFIX people: <http://oeg.fi.upm.es/def/people#>
SELECT ?name ?type
WHERE {
  ?person people:knows people:Rocky .
  ?person rdfs:label ?name.
  ?person rdf:type ?type
}
"""
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query =  """
PREFIX people: <http://oeg.fi.upm.es/def/people#>
SELECT DISTINCT ?name
  WHERE {
    {
      ?person people:hasColleague ?colleague1 .
      ?colleague1 people:ownsPet ?pet .
      ?pet rdf:type people:Animal .
    }
    UNION
    {
      ?person people:hasColleague ?colleague1 .
      ?colleague1 people:hasColleague ?colleague2 .
      ?colleague2 people:ownsPet ?pet .
      ?pet rdf:type people:Animal .
    }

    ?person rdfs:label ?name .
  }


"""

# Visualize the results
for r in g.query(query):
  print(r.name)

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")