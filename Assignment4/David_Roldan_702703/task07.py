# -*- coding: utf-8 -*-
"""task07

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MxhBw01y63aQ8dY-lopZnGoMnqNl-kVQ
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

# TASK 7.1a — RDFLib
# For all classes list (class, superclass). If no superclass, None.
from rdflib.namespace import RDFS
result = []  # list of tuples
classes = set(g.subjects(RDF.type, RDFS.Class))
for c in sorted(classes, key=str):
    sup = g.value(c, RDFS.subClassOf)
    result.append((c, sup if sup is not None else None))

# Visualize
for r in result:
    print(r)

report.validate_07_1a(result)

query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?c ?sc
WHERE {
  ?c rdf:type rdfs:Class .
  OPTIONAL { ?c rdfs:subClassOf ?sc . }
}
ORDER BY STR(?c)
"""

for r in g.query(query):
    print(r.c, r.sc)   # si no tiene superclase, r.sc será None

report.validate_07_1b(query,g)

ns = Namespace("http://oeg.fi.upm.es/def/people#")

person = ns.Person
subclasses = {person}
changed = True
while changed:
    changed = False
    for c in set(g.subjects(RDFS.subClassOf, None)):
        for sup in g.objects(c, RDFS.subClassOf):
            if sup in subclasses and c not in subclasses:
                subclasses.add(c)
                changed = True

individuals = sorted(
    {s for (s, o) in g.subject_objects(RDF.type) if o in subclasses},
    key=str
)

# Visualizar
for i in individuals:
    print(i)

report.validate_07_02a(individuals)

query='''
PREFIX ont:  <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?ind
WHERE {
  ?ind rdf:type ?t .
  ?t rdfs:subClassOf* ont:Person .
}
'''
for r in g.query(query):
  print(r.ind)

report.validate_07_02b(g, query)

query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
SELECT DISTINCT ?name ?type
WHERE {
  ?person ns:knows ns:Rocky.
  ?person rdfs:label ?name.
  ?person a ?type.
}
GROUP BY ?name

"""

# Visualización
for r in g.query(query):
    print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

query = """
PREFIX people: <http://oeg.fi.upm.es/def/people#>
SELECT DISTINCT ?name
WHERE {
    {
      ?person people:hasColleague ?amigo .
      ?amigo people:ownsPet ?perro.
      ?perro rdf:type people:Animal .
    }
    UNION # para representar la disyunción
    {
      ?person people:hasColleague ?amigo .
      ?amigo people:hasColleague ?amego .
      ?amego people:ownsPet ?perro.
      ?pet rdf:type people:Animal .
    }
    ?person rdfs:label ?name
  }
"""

for r in g.query(query):
    print(r.name)

# TO DO
# Visualize the results
## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")