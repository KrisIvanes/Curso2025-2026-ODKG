# -*- coding: utf-8 -*-
"""task06

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MxhBw01y63aQ8dY-lopZnGoMnqNl-kVQ
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal, XSD, URIRef
from rdflib.namespace import RDF, RDFS
from validation import Report
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
r = Report()

ns = Namespace("http://mydomain.org#")
g.add((ns.Researcher, RDF.type, RDFS.Class))
for s, p, o in g:
  print(s,p,o)

ONT = Namespace("http://oeg.fi.upm.es/def/people#")          # clases/propiedades
PER = Namespace("http://oeg.fi.upm.es/resource/person/")     # individuos

g.bind("ontology", ONT)
g.bind("person", PER)

# Clases
g.add((ONT.Person, RDF.type, RDFS.Class))
g.add((ONT.Professor, RDF.type, RDFS.Class))
g.add((ONT.AssociateProfessor, RDF.type, RDFS.Class))
g.add((ONT.InterimAssociateProfessor, RDF.type, RDFS.Class))
g.add((ONT.FullProfessor, RDF.type, RDFS.Class))

# Jerarquía
g.add((ONT.Professor, RDFS.subClassOf, ONT.Person))
g.add((ONT.AssociateProfessor, RDFS.subClassOf, ONT.Professor))
g.add((ONT.InterimAssociateProfessor, RDFS.subClassOf, ONT.AssociateProfessor))
g.add((ONT.FullProfessor, RDFS.subClassOf, ONT.Professor))

# Labels EXACTOS que busca validation.py (¡y con datatype XSD.string!)
g.add((ONT.Person, RDFS.label, Literal("Person", datatype=XSD.string)))
g.add((ONT.Professor, RDFS.label, Literal("Professor", datatype=XSD.string)))
g.add((ONT.AssociateProfessor, RDFS.label, Literal("AssociateProfessor", datatype=XSD.string)))
g.add((ONT.InterimAssociateProfessor, RDFS.label, Literal("InterimAssociateProfessor", datatype=XSD.string)))
g.add((ONT.FullProfessor, RDFS.label, Literal("FullProfessor", datatype=XSD.string)))

# TO DO
# Visualize the results
for s, p, o in g:
  print(s,p,o)

# Validation. Do not remove
r.validate_task_06_01(g)

# hasColleague: domain Person, range Person
g.add((ONT.hasColleague, RDF.type, RDF.Property))
g.add((ONT.hasColleague, RDFS.domain, ONT.Person))
g.add((ONT.hasColleague, RDFS.range, ONT.Person))
g.add((ONT.hasColleague, RDFS.label, Literal("hasColleague", datatype=XSD.string)))

# hasName: domain Person, range rdfs:Literal (¡no xsd:string!)
g.add((ONT.hasName, RDF.type, RDF.Property))
g.add((ONT.hasName, RDFS.domain, ONT.Person))
g.add((ONT.hasName, RDFS.range, RDFS.Literal))
g.add((ONT.hasName, RDFS.label, Literal("hasName", datatype=XSD.string)))

# hasHomePage: domain FullProfessor, range rdfs:Literal
g.add((ONT.hasHomePage, RDF.type, RDF.Property))
g.add((ONT.hasHomePage, RDFS.domain, ONT.FullProfessor))
g.add((ONT.hasHomePage, RDFS.range, RDFS.Literal))
g.add((ONT.hasHomePage, RDFS.label, Literal("hasHomePage", datatype=XSD.string)))

# TO DO
# Visualize the results
for s, p, o in g:
  print(s,p,o)

# Validation. Do not remove
r.validate_task_06_02(g)

# Individuos
oscar = PER.Oscar
asun  = PER.Asun
raul  = PER.Raul

# Tipos
g.add((oscar, RDF.type, ONT.Person))
g.add((asun,  RDF.type, ONT.FullProfessor))
g.add((raul,  RDF.type, ONT.Person))

# Labels (el validador los busca con XSD.string)
g.add((oscar, RDFS.label, Literal("Oscar", datatype=XSD.string)))
g.add((asun,  RDFS.label, Literal("Asun",  datatype=XSD.string)))
g.add((raul,  RDFS.label, Literal("Raul",  datatype=XSD.string)))

# Propiedades requeridas:
# Oscar: type, label, hasColleague, hasName  -> 4
g.add((oscar, ONT.hasColleague, asun))
g.add((oscar, ONT.hasName, Literal("Oscar", datatype=XSD.string)))

# Asun: type, label, hasHomePage, hasColleague -> 4
g.add((asun, ONT.hasHomePage, Literal("https://asun.example/homepage", datatype=XSD.string)))
g.add((asun, ONT.hasColleague, oscar))

# (Raul solo necesita label + namespace correcto para el test 6.3)

# TO DO
# Visualize the results
for s, p, o in g:
  print(s,p,o)

r.validate_task_06_03(g)

from rdflib import Namespace
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
FOAF  = Namespace("http://xmlns.com/foaf/0.1/")

# El validador solo comprueba que existan estos predicados en Oscar:
g.add((oscar, VCARD.Given,  Literal("Oscar")))
g.add((oscar, VCARD.Family, Literal("Perez")))          # pon el apellido que quieras
g.add((oscar, FOAF.email,   Literal("oscar@example.org")))

# TO DO
# Visualize the results
for s, p, o in g:
  print(s,p,o)

r.validate_task_06_04(g)

r.save_report("_Task_06")